source("code/facetplot.R")
facetPlotIndicator(data,"PSE210")
df = data
df$time = as.Date(df$time)
df = df[df$time < as.Date("2015-06-01"),]
df[!duplicated(df),]
summary(!duplicated(df))
view(df)
View(df)
View(df[df$locationCode == "AFG", ])
df$time = as.Date(df$time)
df = df[df$time < as.Date("2015-06-01"),]
df = df[!duplicated(df),]
# getting latest per country + indicator
s = data %>%
group_by(locationCode) %>%
filter(time == max(time)) %>%
group_by(indicatorTypeCode)
s = df %>%
group_by(locationCode) %>%
filter(time == max(time)) %>%
group_by(indicatorTypeCode)
nrow(s)
View(s)
length(unique(df$locationCode))
length(unique(s$locationCode))
length(unique(df$indicatorTypeCode))
length(unique(s$indicatorTypeCode))
s = df %>%
group_by(indicatorTypeCode) %>%
group_by(locationCode) %>%
filter(time == max(time))
length(unique(s$indicatorTypeCode))
# getting latest per country + indicator
s = df %>%
group_by(locationCode) %>%
group_by(indicatorTypeCode) %>%
filter(time == max(time))
length(unique(s$indicatorTypeCode))
nrow(s)
View(s)
length(unique(s$locationCode))
write.csv(s, "data.csv", row.names =F)
write.csv(data, "complete_data.csv", row.names = F)
c = data.frame( iso = unique(data$locationCode), country_name = unique(data$locationName))
View()
View(c)
write.csv(c, "c_list.csv", row.names = F)
i = data.frame(indid = unique(data$indicatorTypeCode), indicator_name = unique(data$indicatorTypeName))
write.csv(i,  "i_list.csv", row.names=F)
i_list = unique(df$indicatorTypeCode)
c_list = unique(df$locationCode)
names(df)
x <- makeCountryAssessment(data)
makeCountryAssessment <- function(df) {
# Cleaning
df$time = as.Date(df$time)
df = df[df$time < as.Date("2015-06-01"),]
df = df[!duplicated(df),]  # lots of duplicates?
# Making unique lists.
i_list = unique(df$indicatorTypeCode)
c_list = unique(df$locationCode)
for (i in 1:i_list) {
s = df[df$indicatorTypeCode == i_list[i],]
for (j in 1:c_list) {
s_country = s[s$locationCode == c_list[j],]
it <- data.frame(
iso = c_list[j],
date = max(s_country$time),
indid = i_list[i]
)
if (j == 1) out <- it
else out <- rbind(out, it)
}
}
return(out)
}
x <- makeCountryAssessment(data)
View(x)
df = data
df$time = as.Date(df$time)
df = df[df$time < as.Date("2015-06-01"),]
i_list = unique(df$indicatorTypeCode)
c_list = unique(df$locationCode)
i = 1
j = 1
s = df[df$indicatorTypeCode == i_list[i],]
s
View(s)
unique(s$indicatorTypeCode)
s_country = s[s$locationCode == c_list[j],]
it <- data.frame(
iso = c_list[j],
date = max(s_country$time),
indid = i_list[i]
)
View(it)
s[s$locationCode == "KRR",]
x <- s[s$locationCode == "KRR",]
nrow(x)
makeCountryAssessment <- function(df) {
# Cleaning
df$time = as.Date(df$time)
df = df[df$time < as.Date("2015-06-01"),]
df = df[!duplicated(df),]  # lots of duplicates?
# Making unique lists.
i_list = unique(df$indicatorTypeCode)
c_list = unique(df$locationCode)
for (i in 1:i_list) {
s = df[df$indicatorTypeCode == i_list[i],]
for (j in 1:c_list) {
s_country = s[s$locationCode == c_list[j],]
if (nrow(s) != 0) {
it <- data.frame(
iso = c_list[j],
date = max(s_country$time),
indid = i_list[i]
)
if (j == 1) out <- it
else out <- rbind(out, it)
}
else next
}
}
return(out)
}
x <- makeCountryAssessment(data)
View(x)
makeCountryAssessment <- function(df) {
# Cleaning
df$time = as.Date(df$time)
df = df[df$time < as.Date("2015-06-01"),]
df = df[!duplicated(df),]  # lots of duplicates?
# Making unique lists.
i_list = unique(df$indicatorTypeCode)
c_list = unique(df$locationCode)
for (i in 1:i_list) {
s = df[df$indicatorTypeCode == i_list[i],]
for (j in 1:c_list) {
s_country = s[s$locationCode == c_list[j],]
if (nrow(s) != 0) {
it <- data.frame(
iso = c_list[j],
date = max(s_country$time),
indid = i_list[i]
)
if (j == 1) c_out <- it
else c_out <- rbind(out, it)
}
else next
if (i == 1) out <- c_out
else out <- rbind(out, c_out)
}
}
return(out)
}
x <- makeCountryAssessment(data)
View(x)
c_list
makeCountryAssessment <- function(df) {
# Cleaning
df$time = as.Date(df$time)
df = df[df$time < as.Date("2015-06-01"),]
df = df[!duplicated(df),]  # lots of duplicates?
# Making unique lists.
i_list = unique(df$indicatorTypeCode)
c_list = unique(df$locationCode)
for (i in 1:i_list) {
s = df[df$indicatorTypeCode == i_list[i],]
for (j in 1:c_list) {
s_country = s[s$locationCode == c_list[j],]
if (nrow(s_country) != 0) {
it <- data.frame(
iso = c_list[j],
date = max(s_country$time),
indid = i_list[i]
)
if (j == 1) c_out <- it
else c_out <- rbind(out, it)
}
else next
if (i == 1) out <- c_out
else out <- rbind(out, c_out)
}
}
return(out)
}
x <- makeCountryAssessment(data)
View(x)
s = df[df$indicatorTypeCode == i_list[i],]
s
nrow(s)
View(s)
makeCountryAssessment <- function(df) {
# Cleaning
df$time = as.Date(df$time)
df = df[df$time < as.Date("2015-06-01"),]
df = df[!duplicated(df),]  # lots of duplicates?
# Making unique lists.
i_list = unique(df$indicatorTypeCode)
c_list = unique(df$locationCode)
for (i in 1:i_list) {
# Subset for indicator.
s = df[df$indicatorTypeCode == i_list[i],]
for (j in 1:c_list) {
# Subset for country.
s_country = s[s$locationCode == c_list[j],]
if (nrow(s_country) != 0) {
it <- data.frame(
iso = c_list[j],
date = max(s_country$time),
indid = i_list[i]
)
if (j == 1) c_out <- it
else c_out <- rbind(c_out, it)
}
else next
# Assembling all country date.
if (i == 1) out <- c_out
else out <- rbind(out, c_out)
}
}
return(out)
}
x <- makeCountryAssessment(data)
View(x)
x
makeCountryAssessment(data)
makeCountryAssessment <- function(df) {
# Cleaning
df$time = as.Date(df$time)
df = df[df$time < as.Date("2015-06-01"),]
df = df[!duplicated(df),]  # lots of duplicates?
# Making unique lists.
i_list = unique(df$indicatorTypeCode)
c_list = unique(df$locationCode)
for (i in 1:length(i_list)) {
# Subset for indicator.
s = df[df$indicatorTypeCode == i_list[i],]
for (j in 1:length(c_list)) {
# Subset for country.
s_country = s[s$locationCode == c_list[j],]
if (nrow(s_country) != 0) {
it <- data.frame(
iso = c_list[j],
date = max(s_country$time),
indid = i_list[i]
)
if (j == 1) c_out <- it
else c_out <- rbind(c_out, it)
}
else next
# Assembling all country date.
if (i == 1) out <- c_out
else out <- rbind(out, c_out)
}
}
return(out)
}
x <- makeCountryAssessment(data)
View(x)
28 * 5
summary(duplicated(x))
makeCountryAssessment <- function(df) {
# Cleaning
df$time = as.Date(df$time)
df = df[df$time < as.Date("2015-06-01"),]
df = df[!duplicated(df),]  # lots of duplicates?
# Making unique lists.
i_list = unique(df$indicatorTypeCode)
c_list = unique(df$locationCode)
for (i in 1:length(i_list)) {
# Subset for indicator.
s = df[df$indicatorTypeCode == i_list[i],]
for (j in 1:length(c_list)) {
# Subset for country.
s_country = s[s$locationCode == c_list[j],]
if (nrow(s_country) != 0) {
it <- data.frame(
iso = c_list[j],
date = max(s_country$time),
indid = i_list[i]
)
if (j == 1) c_out <- it
else c_out <- rbind(c_out, it)
}
else next
# Assembling all country date.
if (i == 1) out <- c_out
else out <- rbind(out, c_out)
}
}
return(out[!duplicated(out)])
}
x <- makeCountryAssessment(data)
makeCountryAssessment <- function(df) {
# Cleaning
df$time = as.Date(df$time)
df = df[df$time < as.Date("2015-06-01"),]
df = df[!duplicated(df),]  # lots of duplicates?
# Making unique lists.
i_list = unique(df$indicatorTypeCode)
c_list = unique(df$locationCode)
for (i in 1:length(i_list)) {
# Subset for indicator.
s = df[df$indicatorTypeCode == i_list[i],]
for (j in 1:length(c_list)) {
# Subset for country.
s_country = s[s$locationCode == c_list[j],]
if (nrow(s_country) != 0) {
it <- data.frame(
iso = c_list[j],
date = max(s_country$time),
indid = i_list[i]
)
if (j == 1) c_out <- it
else c_out <- rbind(c_out, it)
}
else next
# Assembling all country date.
if (i == 1) out <- c_out
else out <- rbind(out, c_out)
}
}
return(out[!duplicated(out),])
}
x <- makeCountryAssessment(data)
nrow(x)
View(x)
write.csv(x, "assessment.csv", row.names = F)
library(reshape2)
keCountryAssessment <- function(df) {
# Cleaning
df$time = as.Date(df$time)
df = df[df$time < as.Date("2015-06-01"),]
df = df[!duplicated(df),]  # lots of duplicates?
# Making unique lists.
i_list = unique(df$indicatorTypeCode)
c_list = unique(df$locationCode)
for (i in 1:length(i_list)) {
# Subset for indicator.
s = df[df$indicatorTypeCode == i_list[i],]
for (j in 1:length(c_list)) {
# Subset for country.
s_country = s[s$locationCode == c_list[j],]
if (nrow(s_country) != 0) {
it <- data.frame(
iso = c_list[j],
date = max(s_country$time),
indid = i_list[i]
)
if (j == 1) c_out <- it
else c_out <- rbind(c_out, it)
}
else next
# Assembling all country date.
if (i == 1) out <- c_out
else out <- rbind(out, c_out)
}
}
return(out[!duplicated(out),])
}
x <- makeCountryAssessment(data)
makeCountryAssessment <- function(df) {
# Cleaning
df$time = as.Date(df$time)
df = df[df$time < as.Date("2015-06-01"),]
df = df[!duplicated(df),]  # lots of duplicates?
# Making unique lists.
i_list = unique(df$indicatorTypeCode)
c_list = unique(df$locationCode)
for (i in 1:length(i_list)) {
# Subset for indicator.
s = df[df$indicatorTypeCode == i_list[i],]
for (j in 1:length(c_list)) {
# Subset for country.
s_country = s[s$locationCode == c_list[j],]
if (nrow(s_country) != 0) {
it <- data.frame(
iso = c_list[j],
date = max(s_country$time),
indid = i_list[i]
)
if (j == 1) c_out <- it
else c_out <- rbind(c_out, it)
}
else next
# Assembling all country date.
if (i == 1) out <- c_out
else out <- rbind(out, c_out)
}
}
return(out[!duplicated(out),])
}
x <- makeCountryAssessment(data)
View(x)
y  <- dcast(x, iso ~ indid)
y  <- dcast(x, iso ~ indid, value.var = date)
View(y)
y  <- dcast(x, iso ~ indid, value.var = "date")
View(y)
d = out[!duplicated(out),]
makeCountryAssessment <- function(df) {
# Cleaning
df$time = as.Date(df$time)
df = df[df$time < as.Date("2015-06-01"),]
df = df[!duplicated(df),]  # lots of duplicates?
# Making unique lists.
i_list = unique(df$indicatorTypeCode)
c_list = unique(df$locationCode)
for (i in 1:length(i_list)) {
# Subset for indicator.
s = df[df$indicatorTypeCode == i_list[i],]
for (j in 1:length(c_list)) {
# Subset for country.
s_country = s[s$locationCode == c_list[j],]
if (nrow(s_country) != 0) {
it <- data.frame(
iso = c_list[j],
date = max(s_country$time),
indid = i_list[i]
)
if (j == 1) c_out <- it
else c_out <- rbind(c_out, it)
}
else next
# Assembling all country date.
if (i == 1) out <- c_out
else out <- rbind(out, c_out)
}
}
d = out[!duplicated(out),]
d$date = as.character(d$date)
e = dcast(d, iso ~ indid, value.var = "date")
return()
}
x <- makeCountryAssessment(data)
View(x)
makeCountryAssessment <- function(df) {
# Cleaning
df$time = as.Date(df$time)
df = df[df$time < as.Date("2015-06-01"),]
df = df[!duplicated(df),]  # lots of duplicates?
# Making unique lists.
i_list = unique(df$indicatorTypeCode)
c_list = unique(df$locationCode)
for (i in 1:length(i_list)) {
# Subset for indicator.
s = df[df$indicatorTypeCode == i_list[i],]
for (j in 1:length(c_list)) {
# Subset for country.
s_country = s[s$locationCode == c_list[j],]
if (nrow(s_country) != 0) {
it <- data.frame(
iso = c_list[j],
date = max(s_country$time),
indid = i_list[i]
)
if (j == 1) c_out <- it
else c_out <- rbind(c_out, it)
}
else next
# Assembling all country date.
if (i == 1) out <- c_out
else out <- rbind(out, c_out)
}
}
d = out[!duplicated(out),]
d$date = as.character(d$date)
e = dcast(d, iso ~ indid, value.var = "date")
return(e)
}
x <- makeCountryAssessment(data)
View()
View(x)
makeCountryAssessment <- function(df) {
# Cleaning
df$time = as.Date(df$time)
df = df[df$time < as.Date("2015-06-01"),]
df = df[!duplicated(df),]  # lots of duplicates?
# Making unique lists.
i_list = unique(df$indicatorTypeCode)
c_list = unique(df$locationCode)
for (i in 1:length(i_list)) {
# Subset for indicator.
s = df[df$indicatorTypeCode == i_list[i],]
for (j in 1:length(c_list)) {
# Subset for country.
s_country = s[s$locationCode == c_list[j],]
if (nrow(s_country) != 0) {
it <- data.frame(
iso = c_list[j],
date = max(s_country$time),
indid = i_list[i]
)
if (j == 1) c_out <- it
else c_out <- rbind(c_out, it)
}
else next
# Assembling all country date.
if (i == 1) out <- c_out
else out <- rbind(out, c_out)
}
}
d = out[!duplicated(out),]
d$date = format(d$date, "%Y")
e = dcast(d, iso ~ indid, value.var = "date")
return(e)
}
x <- makeCountryAssessment(data)
View(x)
write.csv(x, "assessment.csv", row.names =F)
